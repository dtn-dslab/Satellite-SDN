// Code generated by bpf2go; DO NOT EDIT.

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadRedir_disable returns the embedded CollectionSpec for redir_disable.
func loadRedir_disable() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Redir_disableBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load redir_disable: %w", err)
	}

	return spec, err
}

// loadRedir_disableObjects loads redir_disable and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*redir_disableObjects
//	*redir_disablePrograms
//	*redir_disableMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadRedir_disableObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadRedir_disable()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// redir_disableSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type redir_disableSpecs struct {
	redir_disableProgramSpecs
	redir_disableMapSpecs
}

// redir_disableSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type redir_disableProgramSpecs struct {
}

// redir_disableMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type redir_disableMapSpecs struct {
	DebugMap       *ebpf.MapSpec `ebpf:"debug_map"`
	MapActiveEstab *ebpf.MapSpec `ebpf:"map_active_estab"`
	MapProxy       *ebpf.MapSpec `ebpf:"map_proxy"`
	MapRedir       *ebpf.MapSpec `ebpf:"map_redir"`
}

// redir_disableObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadRedir_disableObjects or ebpf.CollectionSpec.LoadAndAssign.
type redir_disableObjects struct {
	redir_disablePrograms
	redir_disableMaps
}

func (o *redir_disableObjects) Close() error {
	return _Redir_disableClose(
		&o.redir_disablePrograms,
		&o.redir_disableMaps,
	)
}

// redir_disableMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadRedir_disableObjects or ebpf.CollectionSpec.LoadAndAssign.
type redir_disableMaps struct {
	DebugMap       *ebpf.Map `ebpf:"debug_map"`
	MapActiveEstab *ebpf.Map `ebpf:"map_active_estab"`
	MapProxy       *ebpf.Map `ebpf:"map_proxy"`
	MapRedir       *ebpf.Map `ebpf:"map_redir"`
}

func (m *redir_disableMaps) Close() error {
	return _Redir_disableClose(
		m.DebugMap,
		m.MapActiveEstab,
		m.MapProxy,
		m.MapRedir,
	)
}

// redir_disablePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadRedir_disableObjects or ebpf.CollectionSpec.LoadAndAssign.
type redir_disablePrograms struct {
}

func (p *redir_disablePrograms) Close() error {
	return _Redir_disableClose()
}

func _Redir_disableClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed redir_disable_bpf.o
var _Redir_disableBytes []byte
