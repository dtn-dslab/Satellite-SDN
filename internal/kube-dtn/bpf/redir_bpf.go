// Code generated by bpf2go; DO NOT EDIT.

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadRedir returns the embedded CollectionSpec for redir.
func loadRedir() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_RedirBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load redir: %w", err)
	}

	return spec, err
}

// loadRedirObjects loads redir and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*redirObjects
//	*redirPrograms
//	*redirMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadRedirObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadRedir()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// redirSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type redirSpecs struct {
	redirProgramSpecs
	redirMapSpecs
}

// redirSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type redirProgramSpecs struct {
	BpfRedirProxy *ebpf.ProgramSpec `ebpf:"bpf_redir_proxy"`
}

// redirMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type redirMapSpecs struct {
	DebugMap       *ebpf.MapSpec `ebpf:"debug_map"`
	MapActiveEstab *ebpf.MapSpec `ebpf:"map_active_estab"`
	MapProxy       *ebpf.MapSpec `ebpf:"map_proxy"`
	MapRedir       *ebpf.MapSpec `ebpf:"map_redir"`
}

// redirObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadRedirObjects or ebpf.CollectionSpec.LoadAndAssign.
type redirObjects struct {
	redirPrograms
	redirMaps
}

func (o *redirObjects) Close() error {
	return _RedirClose(
		&o.redirPrograms,
		&o.redirMaps,
	)
}

// redirMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadRedirObjects or ebpf.CollectionSpec.LoadAndAssign.
type redirMaps struct {
	DebugMap       *ebpf.Map `ebpf:"debug_map"`
	MapActiveEstab *ebpf.Map `ebpf:"map_active_estab"`
	MapProxy       *ebpf.Map `ebpf:"map_proxy"`
	MapRedir       *ebpf.Map `ebpf:"map_redir"`
}

func (m *redirMaps) Close() error {
	return _RedirClose(
		m.DebugMap,
		m.MapActiveEstab,
		m.MapProxy,
		m.MapRedir,
	)
}

// redirPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadRedirObjects or ebpf.CollectionSpec.LoadAndAssign.
type redirPrograms struct {
	BpfRedirProxy *ebpf.Program `ebpf:"bpf_redir_proxy"`
}

func (p *redirPrograms) Close() error {
	return _RedirClose(
		p.BpfRedirProxy,
	)
}

func _RedirClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed redir_bpf.o
var _RedirBytes []byte
