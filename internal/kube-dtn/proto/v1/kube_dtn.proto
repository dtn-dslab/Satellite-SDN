syntax = "proto3";

package proto.v1;

// The Go package name is the version.
option go_package = "github.com/y-young/kube-dtn/v1";

message Pod {
  string name = 1;
  // IP of the node on which the pod is running.
  string src_ip = 2;
  string net_ns = 3;
  string kube_ns = 4;
  repeated Link links = 5;
}

message Link {
  string peer_pod = 1;
  string local_intf = 2;
  string peer_intf = 3;
  string local_ip = 4;
  string peer_ip = 5;
  int64 uid = 6;
  LinkProperties properties = 7;
  string local_mac = 8;
  string peer_mac = 9;
}

message LinkProperties {
  string latency = 1;
  string latency_corr = 2;
  string jitter = 3;
  string loss = 4;
  string loss_corr = 5;
  string rate = 6;
  uint32 gap = 7;
  string duplicate = 8;
  string duplicate_corr = 9;
  string reorder_prob = 10;
  string reorder_corr = 11;
  string corrupt_prob = 12;
  string corrupt_corr = 13;
}

message PodQuery {
  string name = 1;
  string kube_ns = 2;
}

message LinksBatchQuery {
  Pod local_pod = 1;
  repeated Link links = 2;
}

message SetupPodQuery {
  string name = 1;
  string kube_ns = 2;
  string net_ns = 3;
}

message BoolResponse {
  bool response = 1;
}

message RemotePod {
  // Network namespace to setup interface in
  string net_ns = 1;
  // Interface name to update
  string intf_name = 2;
  // IP to update
  string intf_ip = 3;
  // VTEP of VXLAN peer
  string peer_vtep = 4;
  string kube_ns = 5;
  int32 vni = 6;
  LinkProperties properties = 7;
  // Pod name
  string name = 8;
}

// The proto describes both end of a grpc-wire, the local end and the remote
// end.
message WireDef {
  // The remote machine interface id, to which this wire is connected to.
  //  When local machine sends a packet to remote mahcine over grpc-wire,
  //  then along with the packet data, local machine also sends the interface id 
  //  to whihc this packet needs to delivered in remote machine. It avoids any 
  //  per packet interface lookup at the remote end. Packet delivery becomes
  //  an O(1) operation at remote end.
  int64 peer_intf_id = 1;

  // The remote machine interface IP, to which this grpc wire is connected to.
  string peer_ip = 2;

  // Interface name, which comes from topology definition and to be put
  // inside container.
  // This filed is used when grpc-wire to be created.
  string intf_name_in_pod = 3;    

  // Network name space of the local pod which is connected to this
  // grpc-wire
  string local_pod_net_ns = 4;  
    
  // Each link has a uid.
  int64 link_uid = 5;

  // Name of the local pod where this wire is getting added.
  string local_pod_name = 6;

  // Every interface insdie a pod is one end of a veth pair. The other end of
  // the veth pair is with the local node. This is the name of  veth end, which
  // is with the node. Packets coming from the pod will be picked up from this
  // veth end and will be transported to the remote node over grpc wire.
  string veth_name_local_host = 7;

  string kube_ns = 8;

  string local_pod_ip = 9;
  
}

message WireCreateResponse {
  bool response = 1;
  // the interface id, that was created.
  int64 peer_intf_id = 2;
}

message Packet {
  // the remote machine interface id, to which this packet should be delivered. 
  int64 remot_intf_id = 1;   
  bytes frame = 2;
}

message GenerateNodeInterfaceNameRequest {
  string pod_intf_name = 1;
  string pod_name = 2;
}


message GenerateNodeInterfaceNameResponse {
  bool ok = 1;
  string node_intf_name = 2;   
}

service Local {
  rpc Get (PodQuery) returns (Pod);
  rpc SetAlive (Pod) returns (BoolResponse);
  rpc AddLinks (LinksBatchQuery) returns (BoolResponse);
  rpc DelLinks (LinksBatchQuery) returns (BoolResponse);
  rpc UpdateLinks (LinksBatchQuery) returns (BoolResponse);
  rpc SetupPod (SetupPodQuery) returns (BoolResponse);
  rpc DestroyPod (PodQuery) returns (BoolResponse);

  rpc GRPCWireExists(WireDef) returns (WireCreateResponse); 
  rpc AddGRPCWireLocal(WireDef) returns (BoolResponse);
  rpc RemGRPCWire(WireDef) returns (BoolResponse);

  // A node is going to hold multiple veth to connect to multiple containers. 
  // Each veth name must be unique with in a node. Daemon generates an ID that 
  // is unique in this node.
  rpc GenerateNodeInterfaceName(GenerateNodeInterfaceNameRequest) returns (GenerateNodeInterfaceNameResponse);
}

service Remote {
  rpc Update (RemotePod) returns (BoolResponse);
  rpc AddGRPCWireRemote(WireDef) returns (WireCreateResponse);
}

service WireProtocol {
  rpc SendToOnce (Packet) returns (BoolResponse);
  rpc SendToStream (stream Packet) returns (BoolResponse);
}