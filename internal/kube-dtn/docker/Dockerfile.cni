# GRPC generation
FROM golang:1.18.2 AS proto_base

WORKDIR /src

ENV GOPROXY=https://mirrors.aliyun.com/goproxy/
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
RUN go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
RUN go install github.com/bufbuild/buf/cmd/buf@v1.9.0

COPY proto .
COPY buf.gen.yaml .
COPY buf.yaml .

RUN buf lint && buf generate -v

# istio-tcpip-bypass
# SPDX-License-Identifier: Apache-2.0
# Copyright (C) 2021 Intel Corporation

FROM golang:1.17 AS tcpip_bypass

RUN sed -i "s|http://deb.debian.org/debian|http://mirror.sjtu.edu.cn/debian|g" /etc/apt/sources.list && \
    apt-get update && apt-get install -y \
    make \
    clang \
    llvm \
    libbpf-dev \
    bpftool

WORKDIR /go/src

COPY go.mod go.sum ./
ENV GOPROXY=https://proxy.golang.com.cn,direct
RUN go mod download

COPY bpf/ .
RUN go generate ./bpf

#---------------------------------------------- Stage 2: Build Base : Build binaries (Plugin & Daemon) - ---------------------------------
# Building the binaries
#FROM golang:1.17.2 AS build_base
FROM golang:1.18.2 AS build_base


WORKDIR /go/src/github.com/y-young/kube-dtn
ENV CGO_ENABLED=0 GOPROXY=https://goproxy.io

RUN sed -i 's/http:\/\/deb.debian.org/http:\/\/mirror.sjtu.edu.cn/g' /etc/apt/sources.list; \
    apt-get update -y; \
    apt-get install -y libpcap-dev; \
    apt-get install -y libsystemd-dev
    # apt-get install -y libmnl; \
    # apt-get install -y libmnl-dev; \
    # go get github.com/chamaken/cgolmnl

COPY go.mod .
COPY go.sum .
RUN go mod download;

FROM --platform=${BUILDPLATFORM:-linux/amd64} build_base AS build

ARG LDFLAGS
ARG TARGETOS
ARG TARGETARCH

COPY go.mod .
COPY go.sum .

COPY daemon/ daemon/
COPY api/ api/
COPY proto/ proto/
COPY plugin/ plugin/
COPY common/ common/
COPY bpf/ bpf/
COPY --from=proto_base /src/ .

RUN GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -o kubedtn github.com/y-young/kube-dtn/plugin 
RUN GOOS=${TARGETOS} CGO_ENABLED=1 GOARCH=${TARGETARCH} go build -ldflags="-s -w" -o kubedtnd daemon/main.go; 


#----------------------------------------------------- Final Container ---------------------------------
# FROM alpine:latest
# RUN apk update; \
#     apk add --no-cache jq

FROM ubuntu:22.04
RUN sed -i 's/http:\/\/archive.ubuntu.com/http:\/\/mirror.sjtu.edu.cn/g' /etc/apt/sources.list; \
    sed -i 's/http:\/\/security.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list; \
    apt-get update; \
    apt-get install -y jq; \
    apt-get install -y libpcap-dev; \
    apt-get install -y iproute2;

# apt-get install -y libpcap-dev; \

COPY --from=build /go/src/github.com/y-young/kube-dtn/kubedtn /
COPY --from=build /go/src/github.com/y-young/kube-dtn/kubedtnd /

COPY --from=tcpip_bypass /go/src/redir_disable_bpf.o /

#COPY etc/cni/net.d/kubedtn.conf /
COPY docker/new-entrypoint.sh /entrypoint.sh
# COPY LICENSE /
RUN chmod +x ./entrypoint.sh
RUN chmod +x /kubedtnd
#RUN mkdir /lib64 && ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2

ENTRYPOINT ./entrypoint.sh
